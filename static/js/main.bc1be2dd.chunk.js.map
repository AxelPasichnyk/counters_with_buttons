{"version":3,"sources":["CountBtn.js","Counter.js","CounterControl.js","utils2.js","App.js","serviceWorker.js","index.js"],"names":["CountBtn","props","console","log","onClick","updateCounter","value","count","Counter","updateCounterButton","n","id","resetCounter","deleteCounter","CounterControl","useState","counterList","setCounterList","newCounterList","slice","i","length","splice","map","el","key","push","Math","random","toString","substring","Date","getTime","resetAll","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bc1be2dd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function CountBtn(props) {\r\n\r\n    console.log(props)\r\n    const send = () => {\r\n        props.updateCounter(props.value + props.count)\r\n    }\r\n    return (\r\n        <button onClick={send}>{props.value} </button>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport CountBtn from \"./CountBtn\";\r\n\r\nexport default function Counter(props) {\r\n    const updateCounterButton = (n) => {\r\n        props.updateCounter(props.id, n)\r\n    }\r\n    console.log(props)\r\n    return (\r\n        <center>\r\n            <CountBtn value={-3} count={props.count} updateCounter={updateCounterButton}/>\r\n            <CountBtn value={-2} count={props.count} updateCounter={updateCounterButton}/>\r\n            <CountBtn value={-1} count={props.count} updateCounter={updateCounterButton}/>\r\n            {props.count}\r\n            <CountBtn value={+1} count={props.count} updateCounter={updateCounterButton}/>\r\n            <CountBtn value={+2} count={props.count} updateCounter={updateCounterButton}/>\r\n            <CountBtn value={+3} count={props.count} updateCounter={updateCounterButton}/>\r\n            <button onClick={() => props.resetCounter(props.id)}> reset counter</button>\r\n            <button onClick={() => props.deleteCounter(props.id)}> delete counter</button>\r\n            <hr/>\r\n\r\n        </center>\r\n    );\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport Counter from \"./Counter\";\r\nimport generateId from \"./utils2\";\r\n\r\nexport default function CounterControl() {\r\n    const [counterList, setCounterList] = useState([])\r\n    const updateCounter = (id, n) => {\r\n        let newCounterList = counterList.slice()\r\n        for (let i = 0; i < newCounterList.length; i++) {\r\n            if (newCounterList[i].id === id) {\r\n                newCounterList[i].count = n\r\n            }\r\n        }\r\n        setCounterList(newCounterList)\r\n    }\r\n    const resetAll = () => {\r\n        let newCounterList = counterList.slice()\r\n        for (let i = 0; i < newCounterList.length; i++) {\r\n            newCounterList[i].count = 0\r\n        }\r\n        setCounterList(newCounterList)\r\n    }\r\n    const resetCounter = (id) => {\r\n        let newCounterList = counterList.slice()\r\n        for (let i = 0; i < newCounterList.length; i++) {\r\n            if (newCounterList[i].id === id) {\r\n                newCounterList[i].count = 0\r\n            }\r\n        }\r\n        setCounterList(newCounterList)\r\n    }\r\n\r\n    const deleteCounter = (id) => {\r\n        let newCounterList = counterList.slice()\r\n        for (let i = 0; i < newCounterList.length; i++) {\r\n            if (newCounterList[i].id === id) {\r\n                newCounterList.splice(i, 1)\r\n            }\r\n        }\r\n        setCounterList(newCounterList)\r\n    }\r\n\r\n    const add = () => {\r\n        let newCounterList = counterList.slice()\r\n        newCounterList.push({id: generateId(), count: 0})\r\n        setCounterList(newCounterList)\r\n    };\r\n\r\n    const deleteAll = () => setCounterList([]);\r\n\r\n    console.log(counterList)\r\n    return (\r\n        <center>\r\n            {counterList.map((el) => <Counter resetCounter={resetCounter} deleteCounter={deleteCounter}\r\n                                              updateCounter={updateCounter} count={el.count} key={el.id}\r\n                                              id={el.id}/>)}\r\n            <button onClick={add}>Add one more counter</button>\r\n            <button onClick={deleteAll}>Delete all counters</button>\r\n            <button onClick={() => resetAll()}> Reset all</button>\r\n        </center>\r\n    );\r\n\r\n\r\n}\r\n","export default function generateId() {\r\n    return (\r\n        Math.random().toString(36).substring(2) + new Date().getTime().toString(36)\r\n    );\r\n}","import React from 'react';\r\nimport CounterControl from \"./CounterControl\";\r\n\r\nexport default function App() {\r\n    return (\r\n        <div>\r\n            <CounterControl/>\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}